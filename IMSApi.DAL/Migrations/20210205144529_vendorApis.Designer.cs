// <auto-generated />
using System;
using IMSApi.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IMSApi.DAL.Migrations
{
    [DbContext(typeof(IMSApiDbContext))]
    [Migration("20210205144529_vendorApis")]
    partial class vendorApis
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("IMSApi.EntityModel.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordInHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("VerifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("profile_pic_url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("IMSApi.EntityModel.Entities.Product.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category_Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Parent_Category")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category_Value = "Stiched",
                            Parent_Category = 0
                        },
                        new
                        {
                            Id = 2,
                            Category_Value = "UnStiched",
                            Parent_Category = 0
                        },
                        new
                        {
                            Id = 3,
                            Category_Value = "ReadyMade",
                            Parent_Category = 0
                        });
                });

            modelBuilder.Entity("IMSApi.EntityModel.Entities.Product.Product", b =>
                {
                    b.Property<long>("Product_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Cost_Price")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Selling_price")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Product_ID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VendorId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("IMSApi.EntityModel.Entities.Product.ProductColor", b =>
                {
                    b.Property<int>("ProductColor_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ProductColorValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ProductColor_ID");

                    b.ToTable("productColor");

                    b.HasData(
                        new
                        {
                            ProductColor_ID = 1,
                            ProductColorValue = "Red"
                        },
                        new
                        {
                            ProductColor_ID = 2,
                            ProductColorValue = "Black"
                        },
                        new
                        {
                            ProductColor_ID = 3,
                            ProductColorValue = "Blue"
                        });
                });

            modelBuilder.Entity("IMSApi.EntityModel.Entities.Product.ProductDesign", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("ProductColor_ID")
                        .HasColumnType("int");

                    b.Property<long?>("Product_ID")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("productSizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductColor_ID");

                    b.HasIndex("Product_ID");

                    b.HasIndex("productSizeId");

                    b.ToTable("productDesign");
                });

            modelBuilder.Entity("IMSApi.EntityModel.Entities.Product.ProductImages", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Physicalurl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("Product_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("folderName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("Product_ID");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("IMSApi.EntityModel.Entities.Product.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("productSize");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Value = "23"
                        },
                        new
                        {
                            Id = 5,
                            Value = "24"
                        });
                });

            modelBuilder.Entity("IMSApi.EntityModel.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("_role")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            _role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            _role = "endUser"
                        },
                        new
                        {
                            Id = 3,
                            _role = "customer"
                        },
                        new
                        {
                            Id = 4,
                            _role = "reseller"
                        });
                });

            modelBuilder.Entity("IMSApi.EntityModel.Entities.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Gstin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IsDeleted")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Store_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Supplier_code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Vendor_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Website")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("IMSApi.EntityModel.Entities.Account", b =>
                {
                    b.HasOne("IMSApi.EntityModel.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("IMSApi.EntityModel.Entities.Product.Product", b =>
                {
                    b.HasOne("IMSApi.EntityModel.Entities.Product.Categories", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("IMSApi.EntityModel.Entities.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("IMSApi.EntityModel.Entities.Product.ProductDesign", b =>
                {
                    b.HasOne("IMSApi.EntityModel.Entities.Product.ProductColor", "productColor")
                        .WithMany()
                        .HasForeignKey("ProductColor_ID");

                    b.HasOne("IMSApi.EntityModel.Entities.Product.Product", "product")
                        .WithMany("productDesign")
                        .HasForeignKey("Product_ID");

                    b.HasOne("IMSApi.EntityModel.Entities.Product.ProductSize", "productSize")
                        .WithMany()
                        .HasForeignKey("productSizeId");
                });

            modelBuilder.Entity("IMSApi.EntityModel.Entities.Product.ProductImages", b =>
                {
                    b.HasOne("IMSApi.EntityModel.Entities.Product.Product", "product")
                        .WithMany("Image_Urls")
                        .HasForeignKey("Product_ID");
                });
#pragma warning restore 612, 618
        }
    }
}
